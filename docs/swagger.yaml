basePath: /
definitions:
  consts.CardAction:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - CardActionTopup
    - CardActionPay
    - CardActionRefund
  consts.CardType:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - StudentCard
    - NormalCard
    - VipCard
  consts.Role:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - AdminRole
    - UserRole
    - StaffRole
  consts.Status:
    enum:
    - active
    - inactive
    - blocked
    type: string
    x-enum-varnames:
    - ActiveStatus
    - InactiveStatus
    - BlockedStatus
  consts.UserAction:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - UserActionCheckin
    - UserActionCheckout
  handlers.CardReq:
    properties:
      owner_id:
        type: string
      type:
        type: string
    required:
    - type
    type: object
  handlers.CheckInRequest:
    properties:
      card_id:
        type: string
    required:
    - card_id
    type: object
  handlers.CheckOutRequest:
    properties:
      card_id:
        type: string
    required:
    - card_id
    type: object
  handlers.LoginReq:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  handlers.StationReq:
    properties:
      ip_address:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  handlers.UpdateCardReq:
    properties:
      balance:
        type: number
      owner_id:
        type: string
      status:
        type: string
      type:
        type: integer
    type: object
  models.Card:
    properties:
      balance:
        type: number
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      rf_id:
        type: string
      status:
        $ref: '#/definitions/consts.Status'
      type:
        $ref: '#/definitions/consts.CardType'
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: quan hệ belongs-to
      username:
        description: 1-1 nên unique
        type: string
    type: object
  models.History:
    properties:
      balance:
        type: number
      card_action:
        $ref: '#/definitions/consts.CardAction'
      card_id:
        type: string
      created_at:
        type: string
      id:
        type: integer
      time:
        type: string
      updated_at:
        type: string
      user_action:
        $ref: '#/definitions/consts.UserAction'
      user_id:
        type: string
    type: object
  models.SellHistory:
    properties:
      card:
        allOf:
        - $ref: '#/definitions/models.Card'
        description: Foreign key relationships
      card_id:
        type: string
      card_price_sold:
        type: number
      created_at:
        type: string
      id:
        type: integer
      seller:
        $ref: '#/definitions/models.User'
      seller_id:
        type: string
      time:
        type: string
      updated_at:
        type: string
    type: object
  models.Station:
    properties:
      created_at:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.StationHistory:
    properties:
      action:
        description: '"checkin" hoặc "checkout"'
        type: string
      card:
        allOf:
        - $ref: '#/definitions/models.Card'
        description: Foreign key relationships
      card_id:
        type: string
      created_at:
        type: string
      id:
        type: integer
      station:
        $ref: '#/definitions/models.Station'
      station_id:
        type: integer
      time:
        type: string
      updated_at:
        type: string
      used_balance:
        type: number
    type: object
  models.Train:
    properties:
      company:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.Trip:
    properties:
      created_at:
        type: string
      direction:
        type: string
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      train:
        allOf:
        - $ref: '#/definitions/models.Train'
        description: Foreign key relationships
      train_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      role:
        allOf:
        - $ref: '#/definitions/consts.Role'
        description: '"ADMIN", "USER", "STAFF"'
      status:
        description: '"active" hoặc "inactive"'
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: gometro-backend-production.up.railway.app
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A Metro Card Management System API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Metro API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users in the system (Admin access required)
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get all users (Admin only)
      tags:
      - admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user from the system (Admin access required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Thông tin không tồn tại
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user (Admin only)
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their ID (Admin access required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get user by ID (Admin only)
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update a specific user's information (Admin access required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update user (Admin only)
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginReq'
      produces:
      - application/json
      responses: {}
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with username, password, email, and
        full name
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Đã tạo tài khoản thành công
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad request - validation error, email/username already exists
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - auth
  /card:
    get:
      consumes:
      - application/json
      description: Retrieve all metro cards in the system
      produces:
      - application/json
      responses: {}
      summary: Get all cards
      tags:
      - card
    post:
      consumes:
      - application/json
      description: Create a new metro card with auto-generated card ID and user ID
      parameters:
      - description: Card information
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/handlers.CardReq'
      produces:
      - application/json
      responses: {}
      summary: Create a new card
      tags:
      - card
  /card/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific card from the system
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete card
      tags:
      - card
    get:
      consumes:
      - application/json
      description: Retrieve a specific card by its database ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Card retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Card'
              type: object
        "404":
          description: Thẻ không tồn tại
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get card by ID
      tags:
      - card
  /card/{rf_id}:
    put:
      consumes:
      - application/json
      description: Update a specific card's information
      parameters:
      - description: Card ID
        in: path
        name: rf_id
        required: true
        type: string
      - description: Updated card information
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCardReq'
      produces:
      - application/json
      responses: {}
      summary: Update card
      tags:
      - card
  /card/{rf_id}/topup:
    post:
      consumes:
      - application/json
      description: Add money to a card's balance
      parameters:
      - description: Card ID
        in: path
        name: rf_id
        required: true
        type: string
      - description: Top-up amount
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses: {}
      summary: Top up card balance
      tags:
      - card
  /card/cardid/{rf_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific card by its card ID (physical card number)
      parameters:
      - description: Card ID (physical card number)
        in: path
        name: rf_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get card by Card ID
      tags:
      - card
  /card/status/{status}:
    get:
      consumes:
      - application/json
      description: Retrieve all cards with a specific status (active, inactive, blocked)
      parameters:
      - description: Card status
        enum:
        - active
        - inactive
        - blocked
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get cards by status
      tags:
      - card
  /card/user/{owner_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all cards belonging to a specific user
      parameters:
      - description: User ID
        in: path
        name: owner_id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get cards by user ID
      tags:
      - card
  /history:
    get:
      consumes:
      - application/json
      description: Retrieve all transaction history records
      produces:
      - application/json
      responses:
        "200":
          description: Histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.History'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all history records
      tags:
      - history
  /history/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific history record by its ID
      parameters:
      - description: History ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: History retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.History'
              type: object
        "404":
          description: History not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get history by ID
      tags:
      - history
  /sell-history:
    get:
      consumes:
      - application/json
      description: Retrieve all sell history records with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - description: Filter by card ID
        in: query
        name: card_id
        type: string
      - description: Filter by seller ID
        in: query
        name: seller_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sell histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SellHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all sell history records
      tags:
      - sell-history
  /sell-history/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific sell history record by its ID
      parameters:
      - description: Sell History ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sell history retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SellHistory'
              type: object
        "404":
          description: Sell history not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get sell history by ID
      tags:
      - sell-history
  /sell-history/card/{card_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all sell history records for a specific card
      parameters:
      - description: Card ID
        in: path
        name: card_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sell histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SellHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get sell histories by card ID
      tags:
      - sell-history
  /sell-history/seller/{seller_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all sell history records for a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: seller_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sell histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SellHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get sell histories by seller ID
      tags:
      - sell-history
  /station:
    get:
      consumes:
      - application/json
      description: Retrieve all metro stations
      produces:
      - application/json
      responses:
        "200":
          description: Stations retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Station'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all stations
      tags:
      - station
    post:
      consumes:
      - application/json
      description: Create a new metro station
      parameters:
      - description: Station information
        in: body
        name: station
        required: true
        schema:
          $ref: '#/definitions/handlers.StationReq'
      produces:
      - application/json
      responses:
        "200":
          description: Station created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Station'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a new station
      tags:
      - station
  /station-history:
    get:
      consumes:
      - application/json
      description: Retrieve all station history records with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - description: Filter by card ID
        in: query
        name: card_id
        type: string
      - description: Filter by station ID
        in: query
        name: station_id
        type: integer
      - description: Filter by action (checkin/checkout)
        in: query
        name: action
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Station histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.StationHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all station history records
      tags:
      - station-history
  /station-history/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific station history record by its ID
      parameters:
      - description: Station History ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Station history retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.StationHistory'
              type: object
        "404":
          description: Station history not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get station history by ID
      tags:
      - station-history
  /station-history/action/{action}:
    get:
      consumes:
      - application/json
      description: Retrieve all station history records for a specific action (checkin/checkout)
      parameters:
      - description: Action (checkin/checkout)
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Station histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.StationHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get station histories by action
      tags:
      - station-history
  /station-history/card/{card_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all station history records for a specific card
      parameters:
      - description: Card ID
        in: path
        name: card_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Station histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.StationHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get station histories by card ID
      tags:
      - station-history
  /station-history/station/{station_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all station history records for a specific station
      parameters:
      - description: Station ID
        in: path
        name: station_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Station histories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.StationHistory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get station histories by station ID
      tags:
      - station-history
  /station/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a station
      parameters:
      - description: Station ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Station deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Station not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete station
      tags:
      - station
    get:
      consumes:
      - application/json
      description: Retrieve a specific station by its ID
      parameters:
      - description: Station ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Station retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Station'
              type: object
        "404":
          description: Station not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get station by ID
      tags:
      - station
    put:
      consumes:
      - application/json
      description: Update an existing station
      parameters:
      - description: Station ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated station information
        in: body
        name: station
        required: true
        schema:
          $ref: '#/definitions/handlers.StationReq'
      produces:
      - application/json
      responses:
        "200":
          description: Station updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Station'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Station not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update station
      tags:
      - station
  /station/{id}/checkin:
    post:
      consumes:
      - application/json
      description: Check in a card at a specific station
      parameters:
      - description: Station ID
        in: path
        name: id
        required: true
        type: integer
      - description: Check-in information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CheckInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Check-in successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.StationHistory'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Station or card not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Check in at station
      tags:
      - station
  /station/{id}/checkout:
    post:
      consumes:
      - application/json
      description: Check out a card at a specific station and deduct fare
      parameters:
      - description: Station ID
        in: path
        name: id
        required: true
        type: integer
      - description: Check-out information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CheckOutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Check-out successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.StationHistory'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Station or card not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Check out at station
      tags:
      - station
  /train:
    get:
      consumes:
      - application/json
      description: Retrieve all train records with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - description: Filter by train type
        in: query
        name: type
        type: string
      - description: Filter by company
        in: query
        name: company
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trains retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Train'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all train records
      tags:
      - train
    post:
      consumes:
      - application/json
      description: Create a new train record
      parameters:
      - description: Train information
        in: body
        name: train
        required: true
        schema:
          $ref: '#/definitions/models.Train'
      produces:
      - application/json
      responses:
        "200":
          description: Train created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a new train record
      tags:
      - train
  /train/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a train record
      parameters:
      - description: Train ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Train deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Train not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete train
      tags:
      - train
    get:
      consumes:
      - application/json
      description: Retrieve a specific train record by its ID
      parameters:
      - description: Train ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Train retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "404":
          description: Train not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get train by ID
      tags:
      - train
    put:
      consumes:
      - application/json
      description: Update an existing train record
      parameters:
      - description: Train ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated train information
        in: body
        name: train
        required: true
        schema:
          $ref: '#/definitions/models.Train'
      produces:
      - application/json
      responses:
        "200":
          description: Train updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Train not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update train
      tags:
      - train
  /train/company/{company}:
    get:
      consumes:
      - application/json
      description: Retrieve all train records for a specific company
      parameters:
      - description: Company name
        in: path
        name: company
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trains retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Train'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get trains by company
      tags:
      - train
  /train/type/{type}:
    get:
      consumes:
      - application/json
      description: Retrieve all train records for a specific type
      parameters:
      - description: Train type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trains retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Train'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get trains by type
      tags:
      - train
  /trip:
    get:
      consumes:
      - application/json
      description: Retrieve all trip records with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - description: Filter by train ID
        in: query
        name: train_id
        type: integer
      - description: Filter by direction
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trips retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Trip'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all trip records
      tags:
      - trip
    post:
      consumes:
      - application/json
      description: Create a new trip record for train journeys
      parameters:
      - description: Trip information
        in: body
        name: trip
        required: true
        schema:
          $ref: '#/definitions/models.Trip'
      produces:
      - application/json
      responses:
        "200":
          description: Trip created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Trip'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a new trip record
      tags:
      - trip
  /trip/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a trip record
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trip deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete trip
      tags:
      - trip
    get:
      consumes:
      - application/json
      description: Retrieve a specific trip record by its ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trip retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Trip'
              type: object
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get trip by ID
      tags:
      - trip
    put:
      consumes:
      - application/json
      description: Update an existing trip record
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated trip information
        in: body
        name: trip
        required: true
        schema:
          $ref: '#/definitions/models.Trip'
      produces:
      - application/json
      responses:
        "200":
          description: Trip updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Trip'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update trip
      tags:
      - trip
  /trip/active:
    get:
      consumes:
      - application/json
      description: Retrieve all currently active trips (where end_time is null or
        in the future)
      produces:
      - application/json
      responses:
        "200":
          description: Active trips retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Trip'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get active trips
      tags:
      - trip
  /trip/direction/{direction}:
    get:
      consumes:
      - application/json
      description: Retrieve all trip records for a specific direction
      parameters:
      - description: Direction
        in: path
        name: direction
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trips retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Trip'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get trips by direction
      tags:
      - trip
  /trip/train/{train_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all trip records for a specific train
      parameters:
      - description: Train ID
        in: path
        name: train_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trips retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Trip'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get trips by train ID
      tags:
      - trip
  /user/password:
    put:
      consumes:
      - application/json
      description: Change current user's password
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update current user's email and full name
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad request - validation error or email already exists
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Thông tin không tồn tại
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
