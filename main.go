package main

import (
  "os"
  "strings"

  "go-metro/config"
  _ "go-metro/docs" // This will be generated by swag
  "go-metro/models"
  "go-metro/routes"

  "github.com/gin-contrib/cors"
  "github.com/gin-gonic/gin"
  swaggerFiles "github.com/swaggo/files"
  ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           Go Metro API
// @version         1.0
// @description     A Metro Card Management System API
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      gometro-backend-production.up.railway.app
// @BasePath  /

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
  // Initialize database
  config.ConnectDB()

  // Kiểm tra biến MIGRATE trong env
  migrate := strings.ToLower(os.Getenv("MIGRATE")) == "true"
  if migrate {
    models.MigrateAll()
  }

  // Setup Gin router
  r := gin.Default()

  // Setup CORS middleware - Allow all origins for demo
  r.Use(cors.New(cors.Config{
    AllowOrigins:     []string{"*"},
    AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"},
    AllowHeaders:     []string{"Origin", "Content-Length", "Content-Type", "Authorization", "Accept", "X-Requested-With"},
    ExposeHeaders:    []string{"Content-Length"},
    AllowCredentials: true,
    MaxAge:           12 * 60 * 60, // 12 hours
  }))

  // Setup routes
  routes.SetupRoutes(r)

  // Swagger documentation route
  r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

  // Start server
  r.Run(":8080")
}
